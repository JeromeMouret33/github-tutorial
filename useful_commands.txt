###########################################################################################################################################
#																	  #
#							GIT USEFUL COMMANDS 						       		  #
#																	  #
###########################################################################################################################################


Here you will find the most used commands with git, if you start this file is not for you, you will first need to learn about the basics.
(https://www.atlassian.com/git/tutorials/what-is-git)

- git init:--------------------------------------------------------------------------------------------------------------------------------
	- git init

	- git ini <directory>


- git clone:-------------------------------------------------------------------------------------------------------------------------------
	- git clone <repo> <directory>

	- git clone ssh://john@example.com/path/to/my-project.git
	  Clone from repo through SSH.

	- git clone -branch <tag> <repo>
	  Clone the repository located at <repo> and only clone the ref for <tag>.

	- git clone -depth=1 <repo>
	  Clone only the most recent commit is included.

	- git clone -branch new_feature git://remoterepository.git
	  Clone only the new_feature branch.


- git config:------------------------------------------------------------------------------------------------------------------------------
	- git config --local/--global/--system
	
	- git config --global core.editor "atom --wait"
	  Configuring which editor Git should use.
  

- git add:---------------------------------------------------------------------------------------------------------------------------------
	- git add <file>

	- git add <directory>

	- git add -A or git .
	  Add all the files.

	- git add -p 
	  Begin an interactive staging session that lets you choose portions of a file to add to the next commit.
	  This will present you with a chunk of changes and prompt you for a command. 
	  Use y to stage the chunk, n to ignore the chunk, s to split it into smaller chunks, e to manually edit the chunk, and q to exit.

	- git add -f <your_file>
	  Add and commit an ignored file by .gitignore.


- git commit:------------------------------------------------------------------------------------------------------------------------------
	- git commit 
	  Launch a text editor prompting you for a commit message.

	- git commit -a
	  Commit a snapshot of all changes in the working directory. This only includes modifications to tracked files 
	  (those that have been added with git add at some point in their history).

	- git commit -m "commit message"

	- git commit -am "commit message"
	  Combines the -a and -m options.

	- git commit --amend
	  Change the previously commit.


- git diff:--------------------------------------------------------------------------------------------------------------------------------
	- Coming soon


- git stash:-------------------------------------------------------------------------------------------------------------------------------
	- git stash
	
	- git stash save "comment"
	  Add a comment with the stash.
	
	- git stash pop
	  Reapply previously stashed changes.
	
	- git stash pop stash@{id_stash}

	- git stash apply 
	  Reapply the changes to your working copy and keep them in your stash.
	
	- git stash -u(untracked file) -a(all)

	- git stash list 
	
	- git stash show "-p(show full diff)"
	  Show stash summary

	- git stash -p
	  Iterate through each changed "hunk" in your working copy and ask whether you wish to stash it.

	- git stash branch <new_branch_name> stash@{id_stash}
	  This checks out a new branch based on the commit that you created your stash from, and then pops your stashed changes onto it.

	- git stash drop stash@{id_stash}

	- git stash clear
	  Delete all of your stashes.


- git .gitignore:--------------------------------------------------------------------------------------------------------------------------
	- Comming soon


- git status:------------------------------------------------------------------------------------------------------------------------------
	- Nothing very hard to know about this command. List which files are staged, unstaged, and untracked.


- git log:---------------------------------------------------------------------------------------------------------------------------------
	- git log

	- git log --oneline
	  oneline history

	- git log -n <limit>
	  Limit the number of commits by <limit>.

	- git log --oneline
	  Condense each commit to a single line.

	- git log --stat
	  Along with the ordinary git log information, include which files were altered and the relative number of lines that were added or
	  deleted from each of them.

	- git log -p
	  This shows the full diff of each commit.

	- git log --author="<pattern>"
	  Search for commits by a particular author.

	- git log --grep="<pattern>"
	  Search for commits with a commit message.

	- git log <since>..<until>
	  Show only commits that occur between <since> and <until>. 

	- git log <file>
	  Only display commits that include the specified file.

	- git log --graph --decorate --oneline
	  Graphical commits representation. 


- git checkout:----------------------------------------------------------------------------------------------------------------------------
	- git checkout <branch>
	  Go to <branch> branch. 
	
	- git checkout <a1e8fb5>
	  Go to <a1e8fb5> commit 

	- git checkout -b <new_branch>


- git tag:---------------------------------------------------------------------------------------------------------------------------------
	- Comming soon


- git blame:-------------------------------------------------------------------------------------------------------------------------------
	- Comming soon

- git rm:----------------------------------------------------------------------------------------------------------------------------------  
	- git rm <your_file>
	  Delete file locally
	
	- git rm --cached <your_file> (-r option for delete some directories)
	  Ignore a file that you've committed in the past. The file will be deleted from your repository, but will remain in your working directory as an ignored file.


- git pull/fetch:--------------------------------------------------------------------------------------------------------------------------
	La commande git pull est en fait la commande qui regroupe les commandes git fetch suivie de git merge.
	Cette commande télécharge les données des commits qui n'ont pas encore été récupérées dans votre branche 
	locale puis fusionne ensuite ces données.

	Le choix de la commande à utiliser dépend de la façon dont vous souhaitez travailler. 
	La commande git pull automatise la mise à jour des données mais peut entraîner de nombreux 
	conflits si vous avez modifié beaucoup de fichiers. Utiliser la commande git fetch permet de 
	garder son répertoire de travail à jour et de contrôler le moment où l'on souhaite fusionner 
	les données.


- Les branches:
	- Visualiser toutes les branches: git branches
	- Se deplacer de branches en branches: git checkout <branch_name> 
	- Créer une nouvelle branche (la deuxieme commande crée une nouvelle branche et nous positionne dedans): git branche <new_branch> / git checkout -b <new_branch>
	- git branch -d [branch_name]   -> delete local branch 
	- git push origin [branch_name]  -> delete remote branch 
	- git fetch --all --prune  -> synchro delete branch 
 

- Naviger entre commit:
	- Pour decider sur quel commit aller: git log 
	- git checkout <Sha1Commit>


git log --graph --left-right --cherry-pick --oneline master 
$
