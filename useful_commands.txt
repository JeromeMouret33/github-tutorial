###########################################################################################################################################
#																	  #
#							GIT USEFUL COMMANDS 						       		  #
#																	  #
###########################################################################################################################################

- git init:--------------------------------------------------------------------------------------------------------------------------------
	- git init

	- git ini <directory>


- git clone:-------------------------------------------------------------------------------------------------------------------------------
	- git clone <repo> <directory>

	- git clone ssh://john@example.com/path/to/my-project.git
	  Clone from repo through SSH.

	- git clone -branch <tag> <repo>
	  Clone the repository located at <repo> and only clone the ref for <tag>.

	- git clone -depth=1 <repo>
	  Clone only the most recent commit is included.

	- git clone -branch new_feature git://remoterepository.git
	  Clone only the new_feature branch.


- git config:------------------------------------------------------------------------------------------------------------------------------
	- git config --local/--global/--system
	
	- git config --global core.editor "atom --wait"
	  Configuring which editor Git should use.
  

- git add:---------------------------------------------------------------------------------------------------------------------------------
	- git add <file>

	- git add <directory>

	- git add -A
	  Add all the files.

	- git add -p 
	  Begin an interactive staging session that lets you choose portions of a file to add to the next commit.
	  This will present you with a chunk of changes and prompt you for a command. 
	  Use y to stage the chunk, n to ignore the chunk, s to split it into smaller chunks, e to manually edit the chunk, and q to exit.


- git commit:------------------------------------------------------------------------------------------------------------------------------
	- git commit 
	  Launch a text editor prompting you for a commit message.

	- git commit -a
	  Commit a snapshot of all changes in the working directory.

	- git commit -m "commit message"

	- git commit -am "commit message"
	  Combines the -a and -m options.

	- git commit --amend
	  Change the previously commit.
















- git rm:----------------------------------------------------------------------------------------------------------------------------------  
	- git rm <file name>
	  Delete file locally


- git pull/fetch:--------------------------------------------------------------------------------------------------------------------------
	La commande git pull est en fait la commande qui regroupe les commandes git fetch suivie de git merge.
	Cette commande télécharge les données des commits qui n'ont pas encore été récupérées dans votre branche 
	locale puis fusionne ensuite ces données.

	Le choix de la commande à utiliser dépend de la façon dont vous souhaitez travailler. 
	La commande git pull automatise la mise à jour des données mais peut entraîner de nombreux 
	conflits si vous avez modifié beaucoup de fichiers. Utiliser la commande git fetch permet de 
	garder son répertoire de travail à jour et de contrôler le moment où l'on souhaite fusionner 
	les données.


- Les branches:
	- Visualiser toutes les branches: git branches
	- Se deplacer de branches en branches: git checkout <branch_name> 
	- Créer une nouvelle branche (la deuxieme commande crée une nouvelle branche et nous positionne dedans): git branche <new_branch> / git checkout -b <new_branch>


- Naviger entre commit:
	- Pour decider sur quel commit aller: git log 
	- git checkout <Sha1Commit>


git log --graph --left-right --cherry-pick --oneline master